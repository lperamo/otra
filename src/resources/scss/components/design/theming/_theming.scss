////
/// Theming component.
///
/// @group Theming
/// @access public
/// @since 1.2
/// @author Lionel Péramo
////

// loading sass modules
@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

// loading utilities
@use 'utils/utils';

$font-size: 0.625;
$font-family : string.unquote('system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, "Helvetica Neue", sans-serif');

// initializing an array that will be used to determine which values to pass to the components
$themes : ();

// initializing an array that will be passed to the global-mass-theme mixin
$to-theme: ();
$loaded-components : 'theming';

// Only used for debug purposes
$-processing-theme : '';
$-has-printed-error : false;
$-actual-component : '';
$-actual-callable : null;

///
/// Sets the actual component processed by the theming component
///
/// @since 2.2
/// @access public
/// @param {string} $-component
///
@mixin set-actual-component($-component) {
  $-actual-component: $-component !global;
}

///
/// Sets the actual component processed by the theming component
///
/// @since 2025-04-23
/// @access public
/// @param {string} $-component
///
@mixin set-actual-callable($-callable) {
  $-actual-callable: $-callable !global;
}

///
/// Loads a user defined theme in the 'static' variables $themes.
/// Indicates which modules we use in our main stylesheet.
///
/// @since 2.2
/// @access public
/// @param  {map} $_themes
///
@mixin init-themes($_themes, $modules: null) {
  $themes : map.merge($themes, $_themes) !global;

  @if $modules {
    @if meta.type-of($modules) == 'list' {
      @each $module in $modules {
        @if not list.index($loaded-components, $module) {
          $loaded-components: list.append($loaded-components, $module) !global;
        }
      }
    } @else if not list.index($loaded-components, $modules) {
      $loaded-components : list.append($loaded-components, $modules) !global;
    }
  }
}

///
/// Merges all the themes from the map and returns the final themes map
///
/// @since 2.2
/// @access public
/// @param {map} $_themes
///
@function merge-themes($_themes) {
  $themes : ();

  @each $_theme in $_themes {
    $themes : map.deep-merge($_theme, $themes);
  }

  @return $themes;
}

///
/// Used by the other mixins of this component, this applies a given theme for a given property
///
/// @access public
/// @param  {map}    $-theme                      - The theme 'light' or 'dark'.
/// @param  {string} $-property
/// @param  {string} $-color
/// @param  {string} $-additional-properties-before [''] Will be put at the beginning of the value
/// @param  {string} $-additional-properties-after  [''] Will be put at the end of the value
///
@mixin theme-property(
  $-theme,
  $-property,
  $-color,
  $-additional-properties-before: '',
  $-additional-properties-after: '') {
  @if $-color != 'ECOCOMPOSER ERROR' {
    $-darken-position : string.index($-additional-properties-before, 'darken');
    $-lighten-position : string.index($-additional-properties-before, 'lighten');

    @if $-darken-position { // darken function used
      $-color : color.adjust(map.get($-theme, $-color), $lightness: $-additional-properties-after * -1%);
      $-additional-properties-before : string.slice($-additional-properties-before, 0, $-darken-position - 1);

      @if $-additional-properties-before != '' {
        $-additional-properties-before : $-additional-properties-before + ' ';
      }

      #{$-property}: string.unquote($-additional-properties-before + $-color);
    } @else if $-lighten-position { // lighten function used
      $-color : color.adjust(map.get($-theme, $-color), $lightness: $-additional-properties-after * 1%);
      $-additional-properties-before : string.slice($-additional-properties-before, 0, $-lighten-position - 1) + ' ';

      @if $-additional-properties-before != '' {
        $-additional-properties-before : $-additional-properties-before + ' ';
      }

      #{$-property}: string.unquote($-additional-properties-before + $-color);
    } @else {
      @if $-additional-properties-after != '' {
        $-additional-properties-after : ' ' + $-additional-properties-after;
      }

      #{$-property} :
        string.unquote(
            $-additional-properties-before + map.get($-theme, $-color) + $-additional-properties-after
        );
    }
  }
}

///
/// Launched inside a rule, applies a theme for a given properties
///
/// @access public
/// @param  {string} $-property
/// @param  {string} $-color
/// @param  {string} $-additional-properties-before ['']    Will be put at the beginning of the value
/// @param  {string} $-additional-properties-after  ['']    Will be put at the end of the value
/// @param  {bool}   $-print                        [false] Do we want a print stylesheet?
///
@mixin theme($-property, $-color, $-additional-properties-before : '', $-additional-properties-after : '', $-print: false) {
  @if $-print {
    @include theme-property(
        map.get($themes, 'light'),
        $-property,
        $-color,
        $-additional-properties-before,
        $-additional-properties-after
    );
  } @else {
    @media (prefers-color-scheme : light) {
      @include theme-property(
          map.get($themes, 'light'),
          $-property,
          $-color,
          $-additional-properties-before,
          $-additional-properties-after
      );
    }

    @media (prefers-color-scheme : dark), (prefers-color-scheme : no-preference) {
      @include theme-property(
          map.get($themes, 'dark'),
          $-property,
          $-color,
          $-additional-properties-before,
          $-additional-properties-after
      );
    }
  }
}

///
/// Fills the third and the fourth element of a list with ''
/// SASS removes a dimension if the list contains only one element, so we treat this particular case in an if statement
///
/// @access private
/// @param  {list} $-property-to-theme
///
/// @return {list} $-property-to-theme
///
@function _fill-list-with-empty-strings($-property-to-theme) {
  @if list.length($-property-to-theme) == 2 {
    $-property-to-theme: list.append($-property-to-theme, '');
    $-property-to-theme: list.append($-property-to-theme, '');
    $-property-to-theme: list.append($-property-to-theme, '');
  } @else if list.length($-property-to-theme) == 3 {
    $-property-to-theme: list.append($-property-to-theme, '');
    $-property-to-theme: list.append($-property-to-theme, '');
  } @else if list.length($-property-to-theme) == 4 {
    $-property-to-theme: list.append($-property-to-theme, '');
  }

  @return $-property-to-theme;
}

///
/// Internal function to determine which color code to use (code passed, default component code ...)
///
/// @access private
/// @param  {map}    $-theme  - The theme 'light' or 'dark'.
/// @param  {string} $-suffix - Suffix put after all the selectors
/// @param  {string} $-color
/// @param  {bool}   $-theme-used
/// @param  {bool}   $-print
///
/// @return {list} $-property-to-theme
///
@function _get-color-code($-theme, $-suffix, $-color, $-theme-used, $-print: false) {
  // Testing if color code exists in the themes map
  $-suffixed-color : $-color + $-suffix;

  // Is there a color code for the suffix provided with the class?
  @if $-theme-used and $-suffixed-color != $-color and map.get($-theme, $-suffixed-color) {
    $-color : $-suffixed-color;
  }

  // Is there a color code without suffix for this component?
  @else if not $-theme-used or map.get($-theme, $-color) == null {
    $-default-color : 'default--' + $-color;

    // Do we need the default component color code?
    @if map.get($-theme, $-default-color) {
      $-color : $-default-color;
    } @else {
      $message : 'The related theme is `' + $-processing-theme + '`.\aThe theme configuration sent does not contain `'
        + $-default-color + '`.\a' + if(
          $-theme-used,
          'A custom theme has been used.',
          'No custom theme configuration has been used.'
        ) + '\a' + if(
          map.get($-theme, $-suffixed-color),
          'The color `' + $-suffixed-color + '` exists in this theme.',
          'The color `' + $-suffixed-color + '` does not exist in this theme.') + '\a' +
        if(
          map.get($-theme, $-print),
          'You want a print stylesheet.',
          'You do not want a print stylesheet.'
        ) + '\aThe issue was in the component \'' + $-actual-component + '\'.' + 
        if($-actual-callable is not null, '\aThe issues was found in the callable \'' + $-actual-callable + '\'.', '');

      // For CLI
      $debug-message : 'Cannot set the color.\a\aMaybe\a―――――\a - you did not use a correct syntax\a' +
        '- you wanted to use default values but there are no default values for this component\A - you set `null`' +
        ' for this color, you should put `null` for the alias not for the theme value' +
        '\a\aWhat we know\a――――――――――――\a' + $message;

      @debug $debug-message;
      @return $debug-message + 'ECOCOMPOSER ERROR';
    }
  }

  @return $-color;
}

///
/// Launched inside a rule, it sets the theme for an array of properties for a given theme ('light' or 'dark' list)
///
/// @access public
/// @param  {map}     $-theme               - The theme 'light' or 'dark'.
/// @param  {list}    $-properties-to-theme
///
@mixin mass-theme-properties($-theme, $-properties-to-theme) {
  $-suffix : list.nth($-properties-to-theme, 1);
  $-theme-used : list.nth($-properties-to-theme, 2);
  $-print : list.nth($-properties-to-theme, 3);
  $-properties-to-theme: utils.from-range($-properties-to-theme, 4);

  // Checks if there is only one property to theme
  @if meta.type-of(list.nth($-properties-to-theme, 1)) != 'list' {
    $-properties-to-theme : list.append((), $-properties-to-theme);
  }

  // Now we are sure there are at least two properties to theme
  @each $-property-to-theme in $-properties-to-theme {
    $-property-to-theme: _fill-list-with-empty-strings($-property-to-theme);
    $color : _get-color-code($-theme, $-suffix, list.nth($-property-to-theme, 2), $-theme-used, $-print);

    @if string.index($color, 'ECOCOMPOSER ERROR') and not $-has-printed-error {
      // themes
      $-theme : (
        'light' : (
          'default--debug--border-color' : #ddd !important,
          'default--debug--background' : radial-gradient(at center, #eee, #ccc) !important,
          'default--debug--color' : #333 !important,
          'default--debug--text-shadow--color' : 0 1px #fff !important
        ),
        'dark' : (
          'default--debug--border-color' : #333 !important,
          'default--debug--background' : radial-gradient(at center, #555, #333) !important,
          'default--debug--color' : #ccc !important,
          'default--debug--text-shadow--color' : 0 1px #000 !important
        )
      );

      @include add-themes($-theme);

      $color: string.slice($color, 0, -18);

      @at-root body::before {
        @include mass-theme(
          (
            ('background', 'debug--background'),
            ('border-color', 'debug--border-color'),
            ('color', 'debug--color'),
            ('text-shadow', 'debug--text-shadow--color'),
          ),
          '',
          $-theme-used,
          $-print
        );

        display       : block !important;
        margin        : #{.5rem * $font-size} #{.5rem * $font-size} #{.5rem * $font-size} !important;
        padding       : #{1rem * $font-size} !important;
        border-radius : #{.5rem * $font-size} !important;
        font          : #{1.6rem * $font-size} 'Courier New', monospace !important;
        white-space   : pre-wrap !important;
        word-break    : break-all;
        content       : 'ECOCOMPOSER ERROR\A―――――――――――――――――\A\A#{$color}' !important;
      }

      $color : 'ECOCOMPOSER ERROR';
      $-has-printed-error : true !global;

      @warn $color;
    }

    @include theme-property(
      $-theme,
      list.nth($-property-to-theme, 1), // property
      $color,
      list.nth($-property-to-theme, 3), // before
      list.nth($-property-to-theme, 4)  // after
    );
  }
}

///
/// Launched inside a rule, sets the both themes ('light' and 'dark') for an array of properties.
///
/// @access public
/// @param  {list}    $-properties-to-theme
/// @param  {string}  $-suffix              ['']    - Suffix put after all the selectors
/// @param  {bool}    $-theme-used          [false] - Are we using a theme?
/// @param  {bool}    $-print               [false] - Do we want a print stylesheet?
///
@mixin mass-theme($-properties-to-theme, $-suffix: '', $-theme-used: false, $-print : false) {
  @include set-actual-callable('mass-theme');

  $-properties-to-theme : list.join(($-suffix, $-theme-used, $-print), $-properties-to-theme);

  @if $-print {
    $-processing-theme : 'light' !global;

    @include mass-theme-properties(map.get($themes, 'light'), $-properties-to-theme);
  } @else {
    @media (prefers-color-scheme : light) {
      $-processing-theme : 'light' !global;

      @include mass-theme-properties(map.get($themes, 'light'), $-properties-to-theme);
    }

    @media (prefers-color-scheme : dark), (prefers-color-scheme : no-preference) {
      $-processing-theme : 'dark' !global;

      @include mass-theme-properties(map.get($themes, 'dark'), $-properties-to-theme);
    }
  }
}

///
/// Uses blend modes to adjust theming on background images.
///
/// @access public
/// @param {string} $-image
/// @param {string} $-after      ['']
/// @param {string} $-blend-mode ['soft-light']
/// @param {bool}   $-print      [false]
///
@mixin blend-image($-image, $-after : '', $-blend-mode : 'soft-light', $-print: false) {
  @if $-print {
    background : url('string.unquote($-image)') string.unquote($-after);
  } @else {
    @media (prefers-color-scheme : light) {
      background : url('string.unquote($-image)') string.unquote($-after);
    }

    @media (prefers-color-scheme : dark), (prefers-color-scheme : no-preference) {
      background            : linear-gradient(#000, #000), url('string.unquote($-image)') string.unquote($-after);
      background-blend-mode : string.unquote($-blend-mode), normal;
    }
  }
}

///
/// Applies themes for rules and properties stored in the $to-theme 'static' variable.
///
/// @access public
///
@mixin global-mass-theme($-print: false) {
  @include set-actual-callable('global-mass-theme');

  @if $-print {
    $-processing-theme : 'light' !global;

    @each $-rule, $-properties in $to-theme {
      #{$-rule} {
        @include mass-theme-properties(map.get($themes, 'light'), $-properties);
      }
    }
  } @else {
    @media (prefers-color-scheme : light) {
      $-processing-theme : 'light' !global;

      @each $-rule, $-properties in $to-theme {
        #{$-rule} {
          @include mass-theme-properties(map.get($themes, 'light'), $-properties);
        }
      }
    }

    @media (prefers-color-scheme : dark), (prefers-color-scheme : no-preference) {
      $-processing-theme : 'dark' !global;

      @each $-rule, $-properties in $to-theme {
        #{$-rule} {
          @include mass-theme-properties(map.get($themes, 'dark'), $-properties);
        }
      }
    }
  }
}

///
/// Add themes to the 'static' variables $-themes.
///
/// @access public
///
/// @param {map} $_themes
///
@mixin add-themes($_themes) {
  $themes : map.deep-merge($themes, $_themes) !global;
}

///
/// Adds rules for the global-mass-theme mixin.
///
/// @access public
///
/// @param {map}    $_to_theme
/// @param {string} $-suffix    ['']    - Suffix put after all the selectors
/// @param {bool}   $-suffix    [false] - Are we using a theme?
/// @param {bool}   $-print     [false] - Do we want a print stylesheet?
///
@mixin to-theme($_to-theme, $-suffix: '', $-theme-used: true, $-print: false) {
  $-rule : list.nth(map.keys($_to-theme), 1);
  $-properties : list.nth(list.nth($_to-theme, 1), 2);
  $-temp-map: $to-theme;

  @each $-rule, $-properties in $_to-theme {
    // `break` and `continue` statements do not exist in SASS so we make a for loop that go until a certain length but
    // we will affect the index to this length to stop the loop when needed!
    $-list-length : list.length($to-theme);

    @if $-list-length > 0 {
      @for $-i from 1 through $-list-length {
        $-stored-rule : list.nth(map.keys($to-theme), $-i);

        @if list.length(map.get($to-theme, $-rule)) > 1 {
          $-i : $-list-length;

          // A list that contains stored attributes AND stored CSS properties, see below for deeper explanations
          $-stored-properties : map.get($to-theme, $-rule);

          // Like the $-suffix, $-themeUsed and the $-print variables
          $-stored-attributes : utils.from-range($-stored-properties, 1, 3);

          // Like 'border' for the property and 'vertical-menu--element--border-focus' for its value
          $-stored-css-properties : utils.from-range($-stored-properties, 4);

          @if (list.nth($-stored-properties, 1) == $-suffix
          and list.nth($-stored-properties, 2) == $-theme-used
          and list.nth($-stored-properties, 3) == $-print) {
            // $-stored-css-properties and $-properties are not in an explicit list so we need to force it with `append`
            // and then we put all that into a list
            $-is-list : meta.type-of(list.nth($-stored-css-properties, 1)) == 'list';
            $-to-join: ();

            // CASE 1: The two lists ($-stored-css-properties and $-properties) has more than one set
            // like ('..', '...'), ('..', '..')
            @if $-is-list and meta.type-of(list.nth($-properties, 1)) == 'list' {
              $-to-join: list.join($-stored-css-properties, $-properties);
            }

            // CASE 2: The $-stored-css-properties list has more than one set like ('..', '...'), ('..', '..')
            @else if $-is-list {
              $-to-join: list.append($-stored-css-properties, $-properties);
            }

            // CASE 3 : The $-stored-css-properties list contains only one set
            // like ('border-style', 'vertical-menu--element--border-style')
            @else {
              $-to-join : list.append(
                (),
                list.join(list.append((), $-stored-css-properties), list.append((), $-properties))
              );
            }

            $-block-to-append : ($-rule: list.join($-stored-attributes, $-to-join));
            $-temp-map: map.merge($-temp-map, $-block-to-append);
          }
        } @else {
          $-temp-map: map.merge($-temp-map, ($-rule : ($-suffix, $-theme-used, $-print, $-properties)));
        }
      }
    } @else {
      $-temp-map: map.merge($-temp-map, ($-rule : ($-suffix, $-theme-used, $-print, $-properties)));
    }
  }

  @if $-temp-map != () {
    $to-theme : $-temp-map !global;
  }
}
