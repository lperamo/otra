<?php

const ARG_BUNDLE_NAME = 2,
  ARG_MODULE_NAME = 3,
  ARG_CONTROLLER_NAME = 4,
  ARG_ACTION_NAME = 5,
  ARG_INTERACTIVE = 6;
  $argv = [
    '0' => $argv[0],
    '1' => $argv[1],
    ARG_BUNDLE_NAME => 'HelloWorld',
    ARG_MODULE_NAME => 'frontend',
    ARG_CONTROLLER_NAME => 'index',
    ARG_ACTION_NAME => 'home',
    ARG_INTERACTIVE => 'false'
  ];

$consoleForce = true;
$bundleMask = 9;

// load console tools in order to ask questions (the following includes need those functions)

//define ('CORE_PATH', __DIR__ . '../../');
require CORE_PATH . 'console/Tools.php';

// creates bundles, modules, controllers, actions and their related folders
require CORE_PATH . 'console/architecture/CheckInteractiveMode.php';
require CORE_PATH . 'console/architecture/CheckBundleExistence.php';
require CORE_PATH . 'console/architecture/CheckModuleExistence.php';
require CORE_PATH . 'console/architecture/CheckControllerExistence.php';
require CORE_PATH . 'console/architecture/CreateAction.php';

actionHandling(
  $interactive,
  $bundleName,
  $moduleName,
  $controllerName,
  $controllerPath,
  $argv[ARG_ACTION_NAME],
  $consoleForce
);

// We fixes the action file generated by filling the method (but here we just replaced the whole file)
$actionName = $argv[ARG_ACTION_NAME];
$upperActionName = ucfirst($argv[ARG_ACTION_NAME]);
$starterAction = BASE_PATH . 'bundles/' . $bundleName . '/' . $moduleName . '/controllers/'
  . $argv[ARG_CONTROLLER_NAME] . '/' . $upperActionName . 'Action.php';

file_put_contents(
  $starterAction,
  '<?
/**
 * OTRA starter action
 */
namespace bundles\\' . $bundleName . '\\frontend\\controllers\\' . $controllerName . ';

use lib\myLibs\Controller;

class ' . $upperActionName . 'Action extends Controller
{
  /**
   * @throws \lib\myLibs\LionelException
   */
  public function ' . $actionName . 'Action() {
    echo $this->renderView(\'' . $actionName . '.phtml\', []);
  }
}
?>
'
);

echo CLI_GREEN, "Action filled.", PHP_EOL;

// Adds a routes config file
$routeConfigurationFile = BASE_PATH . 'bundles/' . $bundleName . '/config/Routes.php';
file_put_contents(
  $routeConfigurationFile,
  "<?php
  return [
    'HelloWorld' => [
      'chunks' => ['/helloworld', 'HelloWorld', 'frontend', 'index', 'HomeAction'],
      'resources' => [
        'template' => true
      ]
    ]
  ];
?>"
);

echo 'Route configuration file ', CLI_LIGHT_CYAN,  $routeConfigurationFile, CLI_GREEN, ' created.',
  PHP_EOL;

// We create a starter layout
$starterLayout = BASE_PATH . 'bundles/' . $bundleName . '/views/' . 'layout.phtml';
file_put_contents(
  $starterLayout,
  file_get_contents(CORE_PATH . 'console/architecture/helloWorldLayout.phtml')
);

echo CLI_GREEN, 'Starter layout created in ', CLI_LIGHT_CYAN, substr($starterLayout, strlen(BASE_PATH)),
  CLI_GREEN, '.', PHP_EOL;

// We create the action template that will use this layout
$starterTemplate = BASE_PATH . 'bundles/' . $bundleName . '/' . $moduleName . '/views/' .
  $controllerName . '/' . $actionName . '.phtml';

file_put_contents(
  $starterTemplate,
  "<?php
require BASE_PATH . 'bundles/" . $bundleName . "/views/layout.phtml';

block('title', 'Hello world starter template');
block('body');
?>
  <?php parent(); ?><br/>
  It's the basic template.
<?php endblock(); ?>
"
);

echo 'Starter template created in ', CLI_LIGHT_CYAN, substr($starterTemplate, strlen(BASE_PATH)),
  CLI_GREEN, '.', PHP_EOL;

// We update the routes configuration as we just add one route.
require CORE_PATH . 'console/UpdateConf.php';

// We update the class mapping since we have one action more.
define('VERBOSE', 0);
require CORE_PATH . 'console/GenClassMap.php';
?>
